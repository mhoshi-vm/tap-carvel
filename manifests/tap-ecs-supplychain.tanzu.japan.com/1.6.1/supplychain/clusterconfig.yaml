#@ load("@ytt:data", "data")
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: ecs-template
spec:
  params:
  - default: #@ data.values.aws.cluster
    name: cluster
  - default: #@ data.values.aws.region
    name: region
  - default: #@ data.values.aws.subnet
    name: subnet
  configPath: .data
  lifecycle: mutable
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:json", "json")
    
    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end
    
    #@ def return_annotations(config):
    #@   annotations = {}
    #@   if hasattr(config, "metadata"):
    #@      if hasattr(config.metadata, "annotations"):
    #@         annotations = config.metadata.annotations
    #@      end
    #@   end
    #@   return annotations
    #@ end

    #@ def return_task_cpu(config):
    #@   spec = config.spec
    #@   workload = spec.containers[0]
    #@   resources = workload.resources
    #@   cpu = 512 
    #@   if hasattr(resources, "limits"):
    #@     r = resources.limits
    #@     if hasattr(r, "cpu"):
    #@       cpu = r.cpu
    #@     end
    #@   end
    #@   return cpu
    #@ end

    #@ def return_task_memory(config):
    #@   spec = config.spec
    #@   workload = spec.containers[0]
    #@   resources = workload.resources
    #@   memory = 1024
    #@   if hasattr(resources, "limits"):
    #@     r = resources.limits
    #@     if hasattr(r, "memory"):
    #@       memory = r.memory
    #@     end
    #@   end
    #@   return memory
    #@ end    

    #@ def update_config(config):
    #@   spec = config.spec
    #@   workload = spec.containers[0]
    #@   task = {}
    #@   task["name"] = workload.name
    #@   task["image"] = workload.image
    #@   if hasattr(workload, "ports"):
    #@     task["portMappings"] = workload.ports
    #@   end
    #@   if hasattr(workload, "env"):
    #@     task["environment"] = []
    #@     for e in workload["env"]:
    #@       if hasattr(e, "value"):
    #@         task["environment"].append(e)
    #@       end
    #@       if hasattr(e, "valueFrom"):
    #@         name=""
    #@         key=""
    #@         if hasattr(e.valueFrom, "configMapKeyRef"):
    #@            name = e.valueFrom.configMapKeyRef.name
    #@            key = e.valueFrom.configMapKeyRef.key
    #@         end
    #@         if hasattr(e.valueFrom, "secretKeyRef"):
    #@            name = e.valueFrom.secretKeyRef.name
    #@            key = e.valueFrom.secretKeyRef.key
    #@         end
    #@         ssm_parameter = "/"+name+"/"+key
    #@         task["secrets"] = []
    #@         task["secrets"].append({"name":e.name,"valueFrom": ssm_parameter })
    #@       end
    #@     end
    #@   end
    #@   resources = workload.resources
    #@   if hasattr(resources, "requests"):
    #@     r = resources.requests
    #@     if hasattr(r, "cpu"):
    #@       task["cpu"] = r.cpu
    #@     end
    #@     if hasattr(r, "memory"):
    #@       task["memoryReservation"] = r.memory
    #@     end
    #@   end
    #@   if hasattr(workload, "securityContext"):
    #@     if hasattr(workload.securityContext, "runAsUser"):
    #@        task["user"] = str(workload.securityContext.runAsUser)
    #@     end
    #@   end
    #@   if hasattr(data.values.params, "command"):
    #@     task["command"]= data.values.params.command
    #@   end
    #@   tasks = []
    #@   tasks.append(task)
    #@   return task
    #@ end
    
    #@ def delivery():
    ---
    apiVersion: ecs.aws.crossplane.io/v1alpha1
    kind: TaskDefinition
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
      name: #@ data.values.workload.metadata.name
      annotations: #@ return_annotations(data.values.config)
    spec:
      deletionPolicy: Delete
      providerConfigRef: 
        name: aws-provider
      forProvider:
        containerDefinitions: 
        - #@ update_config(data.values.config)
        family: #@ data.values.workload.metadata.name
        region: #@ data.values.params.region
        cpu: #@ str(return_task_cpu(data.values.config))
        memory: #@ str(return_task_memory(data.values.config))
        networkMode: awsvpc
        requiresCompatibilities:
          - FARGATE
    ---
    apiVersion: ecs.aws.crossplane.io/v1alpha1
    kind: Service
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
      name: #@ data.values.workload.metadata.name
      annotations: #@ return_annotations(data.values.config)
    spec:
      providerConfigRef: 
        name: aws-provider
      deletionPolicy: Delete
      forProvider:
        desiredCount: 1
        cluster: #@ data.values.params.cluster
        launchType: FARGATE
        region: #@ data.values.params.region
        taskDefinitionRef:
          name: #@ data.values.workload.metadata.name
        networkConfiguration:
          awsvpcConfiguration:
            assignPublicIP: DISABLED
            subnets: #@ data.values.params.subnet
    ---
    apiVersion: kapp.k14s.io/v1alpha1
    kind: Config
    
    diffAgainstLastAppliedFieldExclusionRules:
    - path: [metadata, annotations, crossplane.io/external-name]
      resourceMatchers: 
      - apiVersionKindMatcher: 
          apiVersion: ecs.aws.crossplane.io/v1alpha1
          kind: TaskDefinition
      - apiVersionKindMatcher: 
          apiVersion: ecs.aws.crossplane.io/v1alpha1
          kind: Service

    - path: [metadata, annotations, crossplane.io/external-create-pending]
      resourceMatchers:
      - apiVersionKindMatcher:
          apiVersion: ecs.aws.crossplane.io/v1alpha1
          kind: TaskDefinition

    - path: [metadata, annotations, crossplane.io/external-create-succeeded]
      resourceMatchers:
      - apiVersionKindMatcher:
          apiVersion: ecs.aws.crossplane.io/v1alpha1
          kind: TaskDefinition

    - path: [metadata, annotations, kbld.k14s.io/images]
      resourceMatchers:
      - apiVersionKindMatcher:
          apiVersion: ecs.aws.crossplane.io/v1alpha1
          kind: TaskDefinition

    - path: [spec, forProvider, taskDefinition]
      resourceMatchers: 
      - apiVersionKindMatcher:
          apiVersion: ecs.aws.crossplane.io/v1alpha1
          kind: Service
    #@ end
    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name + "-ecs"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
    data:
      delivery.yml: #@ yaml.encode(delivery())
