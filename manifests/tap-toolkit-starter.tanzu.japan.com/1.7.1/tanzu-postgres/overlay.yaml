#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")


#@ if data.values.postgres.enabled:
#@ if data.values.postgres.package.install:
apiVersion: v1
kind: Namespace
metadata:
  name: postgres-install
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-registry
  namespace: postgres-install
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kapp-sa
  namespace: postgres-install
secrets:
  - name: tap-registry
imagePullSecrets:
  - name: tap-registry
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: postgres-kapp-role-binding
  namespace: postgres-install
subjects:
- kind: ServiceAccount
  name: kapp-sa
  namespace: postgres-install
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageRepository
metadata:
  name: tds-pack
  namespace: postgres-install
  annotations:
    kapp.k14s.io/change-group: "pkgr"
spec:
  fetch:
    imgpkgBundle:
      image: #@ data.values.postgres.package.repo + ":" + data.values.postgres.package.version
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: postgres
  namespace: postgres-install
spec:
  serviceAccountName: kapp-sa
  packageRef:
    refName: postgres-operator.sql.tanzu.vmware.com
    versionSelection:
      constraints: #@ data.values.postgres.package.operator_version
  values:
  - secretRef:
      name: change-default-reg-secret
---
apiVersion: v1
kind: Secret
metadata:
  name: change-default-reg-secret
  namespace: postgres-install
stringData:
  change-default-reg-secret.yml: |
    #@data/values-schema
    ---    
    dockerRegistrySecretName: tap-registry
#@ end
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: resource-claims-postgres
  labels:
    resourceclaims.services.apps.tanzu.vmware.com/controller: "true"
rules:
- apiGroups: ["sql.tanzu.vmware.com"]
  resources: ["postgres"]
  verbs: ["get", "list", "watch", "update"]
---
apiVersion: services.apps.tanzu.vmware.com/v1alpha1
kind: ClusterInstanceClass
metadata:
  name: postgres
spec:
  description:
    short: It's a Postgres cluster!
  pool:
    group: sql.tanzu.vmware.com
    kind: Postgres
---
apiVersion: services.apps.tanzu.vmware.com/v1alpha1
kind: ResourceClaimPolicy
metadata:
  name: postgrescluster-cross-namespace
  namespace: service-instances
spec:
  consumingNamespaces:
  - '*'
  subject:
    group: sql.tanzu.vmware.com
    kind: Postgres
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: postgres.sql.tanzu.vmware.com
  annotations:
    kapp.k14s.io/exists: ""
    kapp.k14s.io/change-group: "tkcrd"
spec:
  group: sql.tanzu.vmware.com
  versions:
    - name: v1
  names:
    kind: Postgres
  scope: Namespaced
#@ count = data.values.postgres.count + 1
#@ for j in range(1,count):
---
apiVersion: sql.tanzu.vmware.com/v1
kind: Postgres
metadata:
  name: #@ "postgres-1" + str(j)
  namespace: service-instances
  annotations:
    kapp.k14s.io/change-rule: "upsert after upserting tkcrd"
spec:
  memory: 400Mi
  cpu: "0.4"
  storageSize: 10G
  storageClassName: #@ data.values.postgres.storage_class
  monitorStorageClassName: #@ data.values.postgres.storage_class
  postgresVersion:
    name: #@ data.values.postgres.instance_version
  highAvailability:
    enabled: false
#@ end
#@ end

