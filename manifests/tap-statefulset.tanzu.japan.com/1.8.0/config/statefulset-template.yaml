#@ load("@ytt:data", "data")

#@ if/end "statefulset-template" not in data.values.excluded_templates:
---
apiVersion: carto.run/v1alpha1
kind: ClusterConfigTemplate
metadata:
  name: statefulset-template
  annotations:
    doc: |
      This template consumes an input named config which contains a
      PodTemplateSpec and returns a ConfigMap which contains a
      "delivery.yml" which contains a manifests for a Kubernetes
      Statefulset which will run the templated pod, and a "service.yml"
      Kubernetes Service to expose the pods on the network.
spec:
  configPath: .data

  params:
    - name: volumes
      default:
        - storageClassName: default
          storageSize: 2Gi
          volumeMount:
            name: data-mount
            mountPath: /data
  healthRule:
    alwaysHealthy: {}

  #@ label_exclusions = "[\"" + "\", \"".join(data.values.label_propagation_exclusions) + "\"]"
  #@yaml/text-templated-strings
  ytt: |
    #@ load("@ytt:data", "data")
    #@ load("@ytt:yaml", "yaml")
    #@ load("@ytt:struct", "struct")
    #@ load("@ytt:assert", "assert")
    #@ load("@ytt:overlay", "overlay")

    #@ def addVolumes():
    #@ if/end hasattr(data.values.params, "volumes"):
    spec:
      containers:
      #@overlay/match by="name"
      - name: workload
        #@overlay/match missing_ok=True
        volumeMounts:
        #@ for volume in data.values.params.volumes:
        - #@ volume.volumeMount
        #@ end
    #@ end

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     exclusions = (@= label_exclusions @)
    #@     for k,v in dict(data.values.workload.metadata.labels).items():
    #@       if k not in exclusions:
    #@         labels[k] = v
    #@       end
    #@     end
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def delivery():
    ---
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: #@ data.values.workload.metadata.name
      annotations:
        kapp.k14s.io/update-strategy: "fallback-on-replace"
        ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
        kapp.k14s.io/change-rule: "upsert after upserting servicebinding.io/ServiceBindings"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run", "carto.run/workload-name": data.values.workload.metadata.name })
    spec:
      selector:
        matchLabels: #@ data.values.config.metadata.labels
      template: #@ overlay.apply(data.values.config,addVolumes())
      #@ if/end hasattr(data.values.params, "volumes"):
      volumeClaimTemplates:
      #@ for volume in data.values.params.volumes:
      - metadata:
          name: #@ volume.volumeMount.name
        spec:
          accessModes:
          - ReadWriteOnce
          storageClassName: #@ volume.storageClassName
          resources:
            requests:
              storage: #@ volume.storageSize
      #@ end
    #@ end

    ---
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: #@ data.values.workload.metadata.name + "-server"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
    data:
      delivery.yml: #@ yaml.encode(delivery())