apiVersion: data.packaging.carvel.dev/v1alpha1
kind: Package
metadata:
  name: tap-setup.tanzu.japan.com.1.3.0
spec:
  refName: tap-setup.tanzu.japan.com
  version: 1.3.0
  valuesSchema:
    openAPIv3:
      title: tap-setup.tanzu-jp values schema
      properties:
        dev_namespaces:
          description: namespaces to export secret
          items:
            type: string
          type: array
        registry:
          type: string
          description: contanier registry
        registry_username:
          type: string
          description: contanier registry username
        registry_password:
          type: string
          description: contanier registry password
        gradle_image:
          type: string
          description: gradle image path used for tekton
        git_username:
          type: string
          description: Git username
        git_password:
          type: string
          description: Git password
        tls_crt:
          type: string
          description: TLS Certificate
        tls_key:
          type: string
          description: TLS Key
        tap_gui_viewer_enabled: 
          type: boolean
          description: Enable tag gui viewer role
        blank_pipeline_and_scan:
          type: boolean
          description: Enable blank tekton pipeline and scan template
        metastore_enabled:
          type: boolean
          description: Enable blank tekton pipeline and scan template
  template:
    spec:
      fetch:
      - inline:
          paths:
            config/base.yaml: |
              apiVersion: projectcontour.io/v1
              kind: TLSCertificateDelegation
              metadata:
                name: contour-delegation
                namespace: tanzu-system-ingress
              spec:
                delegations:
                - secretName: cnrs-default-tls
                  targetNamespaces:
                  - "*"
        path: config/
      template:
      - ytt:
          ignoreUnknownComments: true
          paths:
          - config/
          inline:
            paths:
              overlay.yaml: |
                #@ load("@ytt:yaml", "yaml")
                #@ load("@ytt:data", "data")
                #@ load("@ytt:base64", "base64")
                #@ load("@ytt:overlay", "overlay")
                
                #@ def dockerhub_config_fragment():
                username: #@ data.values.registry_username
                password: #@ data.values.registry_password
                #@ end
                
                #@ docker_config = { data.values.registry : dockerhub_config_fragment()}
                
                #@ def dockerhub_config():
                auths: #@ docker_config 
                #@ end

                #@overlay/append
                ---
                apiVersion: v1
                data:
                  tls.crt: #@ base64.encode(data.values.tls_crt)
                  tls.key: #@ base64.encode(data.values.tls_key)
                kind: Secret
                metadata:
                  name: cnrs-default-tls
                  namespace: tanzu-system-ingress
                type: kubernetes.io/tls
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: remove-has-tests-annotation # secret name referred in annotation
                  namespace: tap-install
                stringData:
                  remove-has-tests-annotation.yaml: |
                    #@ load("@ytt:overlay", "overlay")
                    #@overlay/match by=overlay.subset({"kind":"ClusterSupplyChain", "spec": {"selector":{"apps.tanzu.vmware.com/has-tests": "true"}}}), expects="0+"
                    ---
                    spec:
                      selector:
                        #@overlay/remove missing_ok=True
                        apps.tanzu.vmware.com/has-tests: "true"
                 
                #@ if data.values.metastore_enabled:
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: metadata-store-ready-only
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: metadata-store-read-only
                subjects:
                - kind: ServiceAccount
                  name: metadata-store-read-client
                  namespace: metadata-store
                ---
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: metadata-store-read-client
                  namespace: metadata-store
                automountServiceAccountToken: false
                #@ end

                #@ namespaces = data.values.dev_namespaces
                #@ for namespace in namespaces:
                #@overlay/append
                ---
                apiVersion: v1
                data:
                  .dockerconfigjson: #@ base64.encode("{}".format(yaml.decode(yaml.encode(dockerhub_config()))))
                kind: Secret
                metadata:
                  name: registry-credentials
                  namespace: #@ namespace
                type: kubernetes.io/dockerconfigjson
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: tap-registry
                  namespace: #@ namespace
                  annotations:
                    secretgen.carvel.dev/image-pull-secret: ""
                type: kubernetes.io/dockerconfigjson
                data:
                  .dockerconfigjson: e30K
                ---
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: default
                  namespace: #@ namespace
                secrets:
                  - name: registry-credentials
                  - name: tap-registry
                  - name: git-ssh
                imagePullSecrets:
                  - name: registry-credentials
                  - name: tap-registry
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: default-permit-deliverable
                  namespace: #@ namespace
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: deliverable
                subjects:
                  - kind: ServiceAccount
                    name: default
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: default-permit-workload
                  namespace: #@ namespace
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: workload
                subjects:
                  - kind: ServiceAccount
                    name: default
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: git-ssh  # `git-ssh` is the default name.
                  namespace: #@ namespace
                  annotations:
                    tekton.dev/git-0: https://github.com
                type: kubernetes.io/basic-auth          # ! required
                stringData:
                  username: #@ data.values.git_username
                  password: #@ data.values.git_password
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: dev-permit-app-editor
                  namespace: #@ namespace
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: app-editor
                subjects:
                  - kind: Group
                    name: tap-demo
                    apiGroup: rbac.authorization.k8s.io
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: #@ namespace + "-permit-app-editor"
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: app-editor-cluster-access
                subjects:
                  - kind: Group
                    name: tap-demo
 
                #@ if data.values.blank_pipeline_and_scan:
                ---
                apiVersion: tekton.dev/v1beta1
                kind: Pipeline
                metadata:
                  name: developer-defined-tekton-pipeline
                  namespace: #@ namespace
                  labels:
                    apps.tanzu.vmware.com/pipeline: test
                spec:
                  params:
                    - name: source-url
                    - name: source-revision
                  tasks:
                    - name: test
                      params:
                        - name: source-url
                          value: $(params.source-url)
                        - name: source-revision
                          value: $(params.source-revision)
                      taskSpec:
                        params:
                          - name: source-url
                          - name: source-revision
                        steps: 
                          - name: test
                            image: #@ data.values.gradle_image
                            script: |-
                              cd `mktemp -d`

                ---
                apiVersion: scanning.apps.tanzu.vmware.com/v1beta1
                kind: ScanPolicy
                metadata:
                  name: scan-policy
                  namespace: #@ namespace
                spec:
                  regoFile: |
                    package main

                    # Accepted Values: "Critical", "High", "Medium", "Low", "Negligible", "UnknownSeverity"
                    notAllowedSeverities := []
                    ignoreCves := []

                    contains(array, elem) = true {
                      array[_] = elem
                    } else = false { true }

                    isSafe(match) {
                      severities := { e | e := match.ratings.rating.severity } | { e | e := match.ratings.rating[_].severity }
                      some i
                      fails := contains(notAllowedSeverities, severities[i])
                      not fails
                    }

                    isSafe(match) {
                      ignore := contains(ignoreCves, match.id)
                      ignore
                    }

                    deny[msg] {
                      comps := { e | e := input.bom.components.component } | { e | e := input.bom.components.component[_] }
                      some i
                      comp := comps[i]
                      vulns := { e | e := comp.vulnerabilities.vulnerability } | { e | e := comp.vulnerabilities.vulnerability[_] }
                      some j
                      vuln := vulns[j]
                      ratings := { e | e := vuln.ratings.rating.severity } | { e | e := vuln.ratings.rating[_].severity }
                      not isSafe(vuln)
                      msg = sprintf("CVE %s %s %s", [comp.name, vuln.id, ratings])
                    }
                ---
                apiVersion: packaging.carvel.dev/v1alpha1
                kind: PackageInstall
                metadata:
                  name: #@ "grype-" + namespace 
                  namespace: tap-install
                spec:
                  packageRef:
                    refName: grype.scanning.apps.tanzu.vmware.com
                    versionSelection:
                      constraints: 1.3.0
                      prereleases: {}
                  serviceAccountName: tap-install-sa
                  values:
                  - secretRef:
                      name: #@ "grype-values-" + namespace
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: #@ "grype-values-" + namespace
                  namespace: tap-install
                stringData:
                  values.yaml: #@ yaml.encode({ "namespace": namespace, "targetImagePullSecret": "registry-credentials" })
                #@ end
                #@ end

                #@ if data.values.tap_gui_viewer_enabled: 
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  name: additional-k8s-deliverable
                  labels:
                    apps.tanzu.vmware.com/aggregate-to-deliverable: "true"
                rules:
                - apiGroups: [""]
                  resources: ["services"]
                  verbs: ["get", "list", "watch", "create", "patch", "update", "delete", "deletecollection"]
                - apiGroups: ["apps"]
                  resources: ["deployments", "statefulsets"]
                  verbs: ["get", "list", "watch", "create", "patch", "update", "delete", "deletecollection"]
                ---
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: tap-gui
                ---
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  namespace: tap-gui
                  name: tap-gui-viewer
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: tap-gui-read-k8s
                subjects:
                - kind: ServiceAccount
                  namespace: tap-gui
                  name: tap-gui-viewer
                roleRef:
                  kind: ClusterRole
                  name: k8s-reader
                  apiGroup: rbac.authorization.k8s.io
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  name: k8s-reader
                rules:
                - apiGroups: ['']
                  resources: ['pods', 'pods/log', 'services', 'configmaps']
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['apps']
                  resources: ['deployments', 'replicasets']
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['autoscaling']
                  resources: ['horizontalpodautoscalers']
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['networking.k8s.io']
                  resources: ['ingresses']
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['networking.internal.knative.dev']
                  resources: ['serverlessservices']
                  verbs: ['get', 'watch', 'list']
                - apiGroups: [ 'autoscaling.internal.knative.dev' ]
                  resources: [ 'podautoscalers' ]
                  verbs: [ 'get', 'watch', 'list' ]
                - apiGroups: ['serving.knative.dev']
                  resources:
                  - configurations
                  - revisions
                  - routes
                  - services
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['carto.run']
                  resources:
                  - clusterconfigtemplates
                  - clusterdeliveries
                  - clusterdeploymenttemplates
                  - clusterimagetemplates
                  - clusterruntemplates
                  - clustersourcetemplates
                  - clustersupplychains
                  - clustertemplates
                  - deliverables
                  - runnables
                  - workloads
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['source.toolkit.fluxcd.io']
                  resources:
                  - gitrepositories
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['source.apps.tanzu.vmware.com']
                  resources:
                  - imagerepositories
                  - mavenartifacts
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['conventions.carto.run']
                  resources:
                  - podintents
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['kpack.io']
                  resources:
                  - images
                  - builds
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['scanning.apps.tanzu.vmware.com']
                  resources:
                  - sourcescans
                  - imagescans
                  - scanpolicies
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['tekton.dev']
                  resources:
                  - taskruns
                  - pipelineruns
                  verbs: ['get', 'watch', 'list']
                - apiGroups: ['kappctrl.k14s.io']
                  resources:
                  - apps
                  verbs: ['get', 'watch', 'list']
                #@ end
      deploy:
        - kapp: {}
