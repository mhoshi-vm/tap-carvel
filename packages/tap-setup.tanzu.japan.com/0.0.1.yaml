apiVersion: data.packaging.carvel.dev/v1alpha1
kind: Package
metadata:
  name: tap-setup.tanzu.japan.com.0.0.1
spec:
  refName: tap-setup.tanzu.japan.com
  version: 0.0.1
  valuesSchema:
    openAPIv3:
      title: tap-setup.tanzu-jp values schema
      properties:
        devNamespaces:
          description: namespaces to export secret
          items:
            type: string
          type: array
        git_username:
          type: string
          description: Git username
        git_password:
          type: string
          description: Git password
        tls_crt:
          type: string
          description: TLS Certificate
        tls_key:
          type: string
          description: TLS Key
  template:
    spec:
      fetch:
      - inline:
          paths:
            config/base.yaml: |
              apiVersion: projectcontour.io/v1
              kind: TLSCertificateDelegation
              metadata:
                name: contour-delegation
                namespace: tanzu-system-ingress
              spec:
                delegations:
                - secretName: cnrs-default-tls
                  targetNamespaces:
                  - "*"
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: metadata-store-ready-only
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: metadata-store-read-only
              subjects:
              - kind: ServiceAccount
                name: metadata-store-read-client
                namespace: metadata-store
              ---
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: metadata-store-read-client
                namespace: metadata-store
              automountServiceAccountToken: false
              ---
              apiVersion: v1
              kind: Namespace
              metadata:
                name: tap-gui
              ---
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                namespace: tap-gui
                name: tap-gui-viewer
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRoleBinding
              metadata:
                name: tap-gui-read-k8s
              subjects:
              - kind: ServiceAccount
                namespace: tap-gui
                name: tap-gui-viewer
              roleRef:
                kind: ClusterRole
                name: k8s-reader
                apiGroup: rbac.authorization.k8s.io
              ---
              apiVersion: rbac.authorization.k8s.io/v1
              kind: ClusterRole
              metadata:
                name: k8s-reader
              rules:
              - apiGroups: ['']
                resources: ['pods', 'pods/log', 'services', 'configmaps']
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['apps']
                resources: ['deployments', 'replicasets']
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['autoscaling']
                resources: ['horizontalpodautoscalers']
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['networking.k8s.io']
                resources: ['ingresses']
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['networking.internal.knative.dev']
                resources: ['serverlessservices']
                verbs: ['get', 'watch', 'list']
              - apiGroups: [ 'autoscaling.internal.knative.dev' ]
                resources: [ 'podautoscalers' ]
                verbs: [ 'get', 'watch', 'list' ]
              - apiGroups: ['serving.knative.dev']
                resources:
                - configurations
                - revisions
                - routes
                - services
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['carto.run']
                resources:
                - clusterconfigtemplates
                - clusterdeliveries
                - clusterdeploymenttemplates
                - clusterimagetemplates
                - clusterruntemplates
                - clustersourcetemplates
                - clustersupplychains
                - clustertemplates
                - deliverables
                - runnables
                - workloads
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['source.toolkit.fluxcd.io']
                resources:
                - gitrepositories
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['source.apps.tanzu.vmware.com']
                resources:
                - imagerepositories
                - mavenartifacts
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['conventions.carto.run']
                resources:
                - podintents
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['kpack.io']
                resources:
                - images
                - builds
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['scanning.apps.tanzu.vmware.com']
                resources:
                - sourcescans
                - imagescans
                - scanpolicies
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['tekton.dev']
                resources:
                - taskruns
                - pipelineruns
                verbs: ['get', 'watch', 'list']
              - apiGroups: ['kappctrl.k14s.io']
                resources:
                - apps
                verbs: ['get', 'watch', 'list']
        path: config/
      template:
      - ytt:
          ignoreUnknownComments: true
          paths:
          - config/
          inline:
            paths:
              overlay.yaml: |
                #@ load("@ytt:data", "data")
                #@ load("@ytt:base64", "base64")
                #@ load("@ytt:overlay", "overlay")
                
                #@overlay/append
                ---
                apiVersion: v1
                data:
                  tls.crt: #@ base64.encode(data.values.tls_crt)
                  tls.key: #@ base64.encode(data.values.tls_key)
                kind: Secret
                metadata:
                  name: cnrs-default-tls
                  namespace: tanzu-system-ingress
                type: kubernetes.io/tls

                #@ namespaces = data.values.devNamespaces
                #@ for namespace in namespaces:
                #@overlay/append
                ---
                apiVersion: v1
                data:
                  .dockerconfigjson: #@ base64.encode("{}".format(yaml.decode(yaml.encode(dockerhub_config()))))
                kind: Secret
                metadata:
                  creationTimestamp: null
                  name: registry-credentials
                  namespace: #@ namespace
                type: kubernetes.io/dockerconfigjson
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: tap-registry
                  namespace: #@ namespace
                  annotations:
                    secretgen.carvel.dev/image-pull-secret: ""
                type: kubernetes.io/dockerconfigjson
                data:
                  .dockerconfigjson: e30K
                ---
                apiVersion: v1
                kind: ServiceAccount
                metadata:
                  name: default
                  namespace: #@ namespace
                secrets:
                  - name: registry-credentials
                imagePullSecrets:
                  - name: registry-credentials
                  - name: tap-registry
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: default-permit-deliverable
                  namespace: #@ namespace
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: deliverable
                subjects:
                  - kind: ServiceAccount
                    name: default
                ---
                apiVersion: rbac.authorization.k8s.io/v1
                kind: RoleBinding
                metadata:
                  name: default-permit-workload
                  namespace: #@ namespace
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: workload
                subjects:
                  - kind: ServiceAccount
                    name: default
                ---
                apiVersion: v1
                kind: Secret
                metadata:
                  name: git-ssh  # `git-ssh` is the default name.
                  namespace: #@ namespace
                  annotations:
                    tekton.dev/git-0: https://github.com
                type: kubernetes.io/basic-auth          # ! required
                stringData:
                  username: #@ data.values.git_username
                  password: #@ data.values.git_password
                #@ end
      deploy:
        - kapp: {}
