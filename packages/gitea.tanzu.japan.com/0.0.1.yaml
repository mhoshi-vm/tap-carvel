apiVersion: data.packaging.carvel.dev/v1alpha1
kind: Package
metadata:
  name: gitea.tanzu.japan.com.0.0.1
spec:
  refName: gitea.tanzu.japan.com
  version: 0.0.1
  valuesSchema:
    openAPIv3:
      title: gitea.tanzu-jp values schema
      properties:
        namespace:
          type: string
          description: Namespace where jenkins will be installed.
          default: gitea
          examples:
          - gitea
        tls_crt:
          type: string
          description: TLS Certificate
        tls_key:
          type: string
          description: TLS Key
        domain:
          type: string
          description: Domain of dex.
          default: example.com
          examples:
          - example.com
  template:
    spec:
      fetch:
      - inline:
          paths:
            config/base.yaml: |
              ---
              # Source: gitea/templates/service-account.yaml
              apiVersion: v1
              kind: ServiceAccount
              metadata:
                name: gitea
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: gitea
                  helm.sh/chart: gitea-0.1.1
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
                annotations:
              automountServiceAccountToken: true
              ---
              # Source: gitea/charts/postgresql/templates/secrets.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: gitea-postgresql
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: postgresql
                  helm.sh/chart: postgresql-12.1.2
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
              type: Opaque
              data:
                postgres-password: "cVg4Y3NOTHNBag=="
                password: "YktTSzlxb3hvNQ=="
                # We don't auto-generate LDAP password when it's not provided as we do for other passwords
              ---
              # Source: gitea/templates/secrets.yaml
              apiVersion: v1
              kind: Secret
              metadata:
                name: gitea
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: gitea
                  helm.sh/chart: gitea-0.1.1
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
              type: Opaque
              data:
                admin-password: "MU1NdlBic1VpaQ=="
              ---
              # Source: gitea/templates/pvc.yaml
              kind: PersistentVolumeClaim
              apiVersion: v1
              metadata:
                name: gitea
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: gitea
                  helm.sh/chart: gitea-0.1.1
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
              spec:
              
                accessModes:
                  - "ReadWriteOnce"
                resources:
                  requests:
                    storage: "8Gi"
              ---
              # Source: gitea/charts/postgresql/templates/primary/svc-headless.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: gitea-postgresql-hl
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: postgresql
                  helm.sh/chart: postgresql-12.1.2
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/component: primary
                  # Use this annotation in addition to the actual publishNotReadyAddresses
                  # field below because the annotation will stop being respected soon but the
                  # field is broken in some versions of Kubernetes:
                  # https://github.com/kubernetes/kubernetes/issues/58662
                  service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
              spec:
                type: ClusterIP
                clusterIP: None
                # We want all pods in the StatefulSet to have their addresses published for
                # the sake of the other Postgresql pods even before they're ready, since they
                # have to be able to talk to each other in order to become ready.
                publishNotReadyAddresses: true
                ports:
                  - name: tcp-postgresql
                    port: 5432
                    targetPort: tcp-postgresql
                selector:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/component: primary
              ---
              # Source: gitea/charts/postgresql/templates/primary/svc.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: gitea-postgresql
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: postgresql
                  helm.sh/chart: postgresql-12.1.2
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/component: primary
                annotations:
              spec:
                type: ClusterIP
                sessionAffinity: None
                ports:
                  - name: tcp-postgresql
                    port: 5432
                    targetPort: tcp-postgresql
                    nodePort: null
                selector:
                  app.kubernetes.io/name: postgresql
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/component: primary
              ---
              # Source: gitea/templates/svc.yaml
              apiVersion: v1
              kind: Service
              metadata:
                name: gitea
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: gitea
                  helm.sh/chart: gitea-0.1.1
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
              spec:
                type: ClusterIP
                sessionAffinity: None
                ports:
                  - name: http
                    port: 80
                    targetPort: http
                    nodePort: null
                  - name: ssh
                    port: 22
                    targetPort: ssh
                    nodePort: null
                selector:
                  app.kubernetes.io/name: gitea
                  app.kubernetes.io/instance: gitea
              ---
              # Source: gitea/templates/deployment.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: gitea
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: gitea
                  helm.sh/chart: gitea-0.1.1
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
              spec:
                selector:
                  matchLabels:
                    app.kubernetes.io/name: gitea
                    app.kubernetes.io/instance: gitea
                strategy:
                  type: RollingUpdate
                replicas: 1
                template:
                  metadata:
                    labels:
                      app.kubernetes.io/name: gitea
                      helm.sh/chart: gitea-0.1.1
                      app.kubernetes.io/instance: gitea
                      app.kubernetes.io/managed-by: Helm
                    annotations:
                  spec:
              
                    serviceAccountName: gitea
                    securityContext:
                      fsGroup: 1001
                    affinity:
                      podAffinity:
              
                      podAntiAffinity:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          - podAffinityTerm:
                              labelSelector:
                                matchLabels:
                                  app.kubernetes.io/name: gitea
                                  app.kubernetes.io/instance: gitea
                              topologyKey: kubernetes.io/hostname
                            weight: 1
                      nodeAffinity:
              
                    priorityClassName: ""
                    initContainers:
                    containers:
                      - name: gitea
                        image: docker.io/bitnami/gitea:1.17.3-debian-11-r3
                        imagePullPolicy: "IfNotPresent"
                        securityContext:
                          runAsNonRoot: true
                          runAsUser: 1001
                        env:
                          - name: BITNAMI_DEBUG
                            value: "false"
                          - name: GITEA_HTTP_PORT
                            value: "3000"
                          - name: GITEA_SSH_LISTEN_PORT
                            value: "2222"
                          - name: GITEA_SSH_PORT
                            value: "22"
                          - name: GITEA_DATABASE_HOST
                            value: "gitea-postgresql"
                          - name: GITEA_DATABASE_PORT_NUMBER
                            value: "5432"
                          - name: GITEA_DATABASE_NAME
                            value: "bitnami_gitea"
                          - name: GITEA_DATABASE_USERNAME
                            value: "bn_gitea"
                          - name: GITEA_DATABASE_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: gitea-postgresql
                                key: "password"
                          - name: GITEA_ADMIN_USER
                            value: "bn_user"
                          - name: GITEA_ADMIN_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: gitea
                                key: admin-password
                          - name: GITEA_ADMIN_EMAIL
                            value: "user@example.com"
                          - name: GITEA_APP_NAME
                            value: "example"
                          - name: GITEA_RUN_MODE
                            value: "prod"
                        envFrom:
                        ports:
                          - name: http
                            containerPort: 3000
                          - name: ssh
                            containerPort: 2222
                        livenessProbe:
                          httpGet:
                            path: /
                            port: http
                          initialDelaySeconds: 600
                          periodSeconds: 10
                          timeoutSeconds: 5
                          successThreshold: 1
                          failureThreshold: 5
                        readinessProbe:
                          httpGet:
                            path: /
                            port: http
                          initialDelaySeconds: 30
                          periodSeconds: 5
                          timeoutSeconds: 1
                          successThreshold: 1
                          failureThreshold: 5
                        resources:
                          limits: {}
                          requests: {}
                        volumeMounts:
                          - name: gitea-data
                            mountPath: /bitnami/gitea
                    volumes:
                      - name: gitea-data
                        persistentVolumeClaim:
                          claimName: gitea
              ---
              # Source: gitea/charts/postgresql/templates/primary/statefulset.yaml
              apiVersion: apps/v1
              kind: StatefulSet
              metadata:
                name: gitea-postgresql
                namespace: "gitea"
                labels:
                  app.kubernetes.io/name: postgresql
                  helm.sh/chart: postgresql-12.1.2
                  app.kubernetes.io/instance: gitea
                  app.kubernetes.io/managed-by: Helm
                  app.kubernetes.io/component: primary
                annotations:
              spec:
                replicas: 1
                serviceName: gitea-postgresql-hl
                updateStrategy:
                  rollingUpdate: {}
                  type: RollingUpdate
                selector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: gitea
                    app.kubernetes.io/component: primary
                template:
                  metadata:
                    name: gitea-postgresql
                    labels:
                      app.kubernetes.io/name: postgresql
                      helm.sh/chart: postgresql-12.1.2
                      app.kubernetes.io/instance: gitea
                      app.kubernetes.io/managed-by: Helm
                      app.kubernetes.io/component: primary
                    annotations:
                  spec:
                    serviceAccountName: default
              
                    affinity:
                      podAffinity:
              
                      podAntiAffinity:
                        preferredDuringSchedulingIgnoredDuringExecution:
                          - podAffinityTerm:
                              labelSelector:
                                matchLabels:
                                  app.kubernetes.io/name: postgresql
                                  app.kubernetes.io/instance: gitea
                                  app.kubernetes.io/component: primary
                              topologyKey: kubernetes.io/hostname
                            weight: 1
                      nodeAffinity:
              
                    securityContext:
                      fsGroup: 1001
                    hostNetwork: false
                    hostIPC: false
                    initContainers:
                    containers:
                      - name: postgresql
                        image: docker.io/bitnami/postgresql:15.1.0-debian-11-r0
                        imagePullPolicy: "IfNotPresent"
                        securityContext:
                          runAsUser: 1001
                        env:
                          - name: BITNAMI_DEBUG
                            value: "false"
                          - name: POSTGRESQL_PORT_NUMBER
                            value: "5432"
                          - name: POSTGRESQL_VOLUME_DIR
                            value: "/bitnami/postgresql"
                          - name: PGDATA
                            value: "/bitnami/postgresql/data"
                          # Authentication
                          - name: POSTGRES_USER
                            value: "bn_gitea"
                          - name: POSTGRES_POSTGRES_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: gitea-postgresql
                                key: postgres-password
                          - name: POSTGRES_PASSWORD
                            valueFrom:
                              secretKeyRef:
                                name: gitea-postgresql
                                key: password
                          - name: POSTGRES_DB
                            value: "bitnami_gitea"
                          # Replication
                          # Initdb
                          # Standby
                          # LDAP
                          - name: POSTGRESQL_ENABLE_LDAP
                            value: "no"
                          # TLS
                          - name: POSTGRESQL_ENABLE_TLS
                            value: "no"
                          # Audit
                          - name: POSTGRESQL_LOG_HOSTNAME
                            value: "false"
                          - name: POSTGRESQL_LOG_CONNECTIONS
                            value: "false"
                          - name: POSTGRESQL_LOG_DISCONNECTIONS
                            value: "false"
                          - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
                            value: "off"
                          # Others
                          - name: POSTGRESQL_CLIENT_MIN_MESSAGES
                            value: "error"
                          - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
                            value: "pgaudit"
                        ports:
                          - name: tcp-postgresql
                            containerPort: 5432
                        livenessProbe:
                          failureThreshold: 6
                          initialDelaySeconds: 30
                          periodSeconds: 10
                          successThreshold: 1
                          timeoutSeconds: 5
                          exec:
                            command:
                              - /bin/sh
                              - -c
                              - exec pg_isready -U "bn_gitea" -d "dbname=bitnami_gitea" -h 127.0.0.1 -p 5432
                        readinessProbe:
                          failureThreshold: 6
                          initialDelaySeconds: 5
                          periodSeconds: 10
                          successThreshold: 1
                          timeoutSeconds: 5
                          exec:
                            command:
                              - /bin/sh
                              - -c
                              - -e
              
                              - |
                                exec pg_isready -U "bn_gitea" -d "dbname=bitnami_gitea" -h 127.0.0.1 -p 5432
                                [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
                        resources:
                          limits: {}
                          requests:
                            cpu: 250m
                            memory: 256Mi
                        volumeMounts:
                          - name: dshm
                            mountPath: /dev/shm
                          - name: data
                            mountPath: /bitnami/postgresql
                    volumes:
                      - name: dshm
                        emptyDir:
                          medium: Memory
                volumeClaimTemplates:
                  - metadata:
                      name: data
                    spec:
                      accessModes:
                        - "ReadWriteOnce"
                      resources:
                        requests:
                          storage: "8Gi"
        path: config/
      template:
      - ytt:
          ignoreUnknownComments: true
          paths:
          - config/
          inline:
            paths:
              overlay.yaml: |
                #@ load("@ytt:data", "data")
                #@ load("@ytt:overlay", "overlay")
                #@ load("@ytt:base64", "base64")
                #@ load("@ytt:yaml", "yaml")

                #@overlay/append
                ---
                apiVersion: v1
                data:
                  tls.crt: #@ base64.encode(data.values.tls_crt)
                  tls.key: #@ base64.encode(data.values.tls_key)
                kind: Secret
                metadata:
                  name: gitea-tls
                type: kubernetes.io/tls

                #@overlay/append
                ---
                apiVersion: projectcontour.io/v1
                kind: HTTPProxy
                metadata:
                  name: gitea
                spec:
                  routes:
                  - conditions:
                    - prefix: /
                    services:
                    - name: gitea
                      port: 80
                  virtualhost:
                    fqdn: #@ "gitea." + data.values.domain
                    tls:
                      secretName: gitea-tls

                #@overlay/match by=overlay.subset({"kind":"Deployment", "metadata": {"name": "gitea"}})
                ---
                spec:
                  template:
                    spec:
                      containers:
                        #@overlay/match by="name"
                        - name: gitea
                          env:
                            #@overlay/match by="name", missing_ok=True
                            - name: GITEA_ROOT_URL
                              value: #@ "https://gitea." + data.values.domain

                #@overlay/match by=overlay.all, expects="1+"
                ---
                metadata:
                  #@overlay/match missing_ok=True
                  namespace: #@ data.values.namespace

                #@overlay/append
                ---
                apiVersion: v1
                kind: Namespace
                metadata:
                  name: #@ data.values.namespace
      deploy:
        - kapp: {}
